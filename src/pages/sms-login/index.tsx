import { useState, useEffect, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/core/components/ui/button';
import { Input } from '@/core/components/ui/inputs/input';
import { InputOTP, InputOTPGroup, InputOTPSlot } from '@/core/components/ui/inputs/input-otp';
import { Card, CardContent, CardHeader, CardTitle } from '@/core/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/core/components/ui/form';
import { useSendSms } from '@/modules/auth/hooks/useSendSms';
import { useVerifySms } from '@/modules/auth/hooks/useVerifySms';
import { Phone, ArrowLeft, Shield } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const phoneSchema = z.object({
    phoneNumber: z.string()
        .min(1, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        .regex(/^\+?[1-9][\d\s]{1,14}$/, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
});

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è SMS –∫–æ–¥–∞
const codeSchema = z.object({
    code: z.string()
        .min(4, '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã')
        .max(6, '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 6 —Ü–∏—Ñ—Ä')
        .regex(/^\d+$/, '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'),
});

type PhoneFormData = z.infer<typeof phoneSchema>;
type CodeFormData = z.infer<typeof codeSchema>;

export const SmsLoginPage = () => {
    const navigate = useNavigate();
    const [step, setStep] = useState<'phone' | 'code'>('phone');
    const [phoneNumber, setPhoneNumber] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [hasError, setHasError] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const codeInputRef = useRef<HTMLInputElement>(null);

    const { mutateAsync: sendSms, isPending: isSendingSms } = useSendSms();
    const { mutateAsync: verifySms, isPending: isVerifyingSms } = useVerifySms();

    const phoneForm = useForm<PhoneFormData>({
        resolver: zodResolver(phoneSchema),
        defaultValues: {
            phoneNumber: '',
        },
    });

    const codeForm = useForm<CodeFormData>({
        resolver: zodResolver(codeSchema),
        defaultValues: {
            code: '',
        },
    });

    const handlePhoneSubmit = async (data: PhoneFormData) => {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –¥–ª—è –Ω–æ–º–µ—Ä–∞:', data.phoneNumber);
        setIsLoading(true);
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ URL –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            const isDev = import.meta.env.DEV || window.location.hostname === 'localhost';

            const result = await sendSms({
                phoneNumber: data.phoneNumber,
                isDev: isDev
            });
            console.log('SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setPhoneNumber(data.phoneNumber);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            setStep('code');

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–æ–¥–∞ –ü–û–°–õ–ï –ø–µ—Ä–µ—Ö–æ–¥–∞
            setTimeout(() => {
                codeForm.reset({ code: '' });
                codeForm.setValue('code', '');
            }, 100);

            console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –∫–æ–¥–∞');

            if (isDev) {
                console.log('üîß DEV MODE: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
        } finally {
            setIsLoading(false);
        }
    };

    const handleCodeSubmit = async (data: CodeFormData) => {
        setIsLoading(true);
        try {
            await verifySms({
                phoneNumber,
                code: data.code
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMS:', error);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
            setHasError(true);

            // –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            codeForm.reset({ code: '' });
            codeForm.setValue('code', '');

            // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                setHasError(false);
            }, 3000);

            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            setTimeout(() => {
                codeInputRef.current?.focus();
            }, 100);
        } finally {
            setIsLoading(false);
            setIsSubmitting(false);
        }
    };

    const handleBackToPhone = () => {
        setStep('phone');
        codeForm.reset({ code: '' });
        codeForm.setValue('code', '');
    };

    const handleBackToHome = () => {
        navigate('/');
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —à–∞–≥
    useEffect(() => {
        if (step === 'code' && codeInputRef.current) {
            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            codeForm.reset({ code: '' });
            codeForm.setValue('code', '');

            // –ó–∞—Ç–µ–º —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è
            setTimeout(() => {
                codeInputRef.current?.focus();
            }, 100);
        }
    }, [step, codeForm]);


    return (
        <div className="min-h-screen flex flex-col items-center bg-gradient-to-br from-background to-secondary p-4">
            <div className="w-full flex justify-start mb-4">
                <Button
                    variant="ghost"
                    onClick={handleBackToHome}
                    className="flex items-center gap-2"
                >
                    <ArrowLeft className="h-4 w-4" />
                    –ù–∞–∑–∞–¥
                </Button>
            </div>

            <div className="w-full max-w-md flex-1 flex items-center justify-center">
                <Card className="shadow-xl border-0 bg-card w-full">
                    <CardHeader className="text-center pb-6">
                        <div className="w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4">
                            <Shield className="h-8 w-8 text-primary-foreground" />
                        </div>
                        <CardTitle className="text-center text-2xl font-bold text-card-foreground">
                            {step === 'phone' ? '–í—Ö–æ–¥ –ø–æ SMS' : '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞'}
                        </CardTitle>
                        <p className="text-muted-foreground mt-2">
                            {step === 'phone'
                                ? '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞'
                                : `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${phoneNumber}`
                            }
                        </p>
                        {(import.meta.env.DEV || window.location.hostname === 'localhost') && (
                            <div className="mt-3 px-3 py-2 bg-yellow-100 border border-yellow-300 rounded-lg">
                                <p className="text-sm text-yellow-800 font-medium">
                                    –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                                </p>

                            </div>
                        )}
                    </CardHeader>

                    <CardContent>
                        {step === 'phone' ? (
                            <Form {...phoneForm}>
                                <form onSubmit={phoneForm.handleSubmit(handlePhoneSubmit)} className="space-y-6">
                                    <FormField
                                        control={phoneForm.control}
                                        name="phoneNumber"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-sm font-medium text-card-foreground">
                                                    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                                                </FormLabel>
                                                <FormControl>
                                                    <div className="relative">
                                                        <Phone className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5" />
                                                        <Input
                                                            {...field}
                                                            type="tel"
                                                            placeholder="+375 29 123 45 67"
                                                            className="pl-12 bg-input border-input focus:border-ring focus:ring-ring"
                                                            autoComplete="tel"
                                                        />
                                                    </div>
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <Button
                                        type="submit"
                                        className="w-full h-12 text-base font-medium bg-primary hover:bg-primary/90 text-primary-foreground"
                                        disabled={isLoading || isSendingSms}
                                    >
                                        {isLoading || isSendingSms ? (
                                            <div className="flex items-center justify-center">
                                                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary-foreground mr-2"></div>
                                                –û—Ç–ø—Ä–∞–≤–∫–∞...
                                            </div>
                                        ) : (
                                            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥'
                                        )}
                                    </Button>
                                </form>
                            </Form>
                        ) : (
                            <Form {...codeForm}>
                                <div className="space-y-6">
                                    <FormField
                                        control={codeForm.control}
                                        name="code"
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="text-sm font-medium text-card-foreground">
                                                    –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                                </FormLabel>
                                                <FormControl>
                                                    <InputOTP
                                                        maxLength={6}
                                                        value={field.value || ''}
                                                        onChange={(value) => {
                                                            console.log('OTP onChange:', value);
                                                            field.onChange(value);
                                                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
                                                            codeForm.setValue('code', value);
                                                            codeForm.trigger('code');
                                                            // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
                                                            if (hasError) {
                                                                setHasError(false);
                                                            }

                                                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä
                                                            if (value.length === 6 &&
                                                                !isLoading &&
                                                                !isVerifyingSms &&
                                                                !isSubmitting) {
                                                                console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã');
                                                                setIsSubmitting(true);

                                                                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                                                                setTimeout(() => {
                                                                    handleCodeSubmit({ code: value });
                                                                }, 500);
                                                            }
                                                        }}
                                                        ref={codeInputRef}
                                                    >
                                                        <InputOTPGroup className={`justify-center ${hasError ? 'border-red-500' : ''}`}>
                                                            <InputOTPSlot
                                                                index={0}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                            <InputOTPSlot
                                                                index={1}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                            <InputOTPSlot
                                                                index={2}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                            <InputOTPSlot
                                                                index={3}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                            <InputOTPSlot
                                                                index={4}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                            <InputOTPSlot
                                                                index={5}
                                                                className={hasError ? 'border-red-500 bg-red-50' : ''}
                                                            />
                                                        </InputOTPGroup>
                                                    </InputOTP>
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />

                                    <div className="space-y-3">
                                        {(isLoading || isVerifyingSms || isSubmitting) && (
                                            <div className="flex items-center justify-center py-4">
                                                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary mr-2"></div>
                                                <span className="text-sm text-muted-foreground">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...</span>
                                            </div>
                                        )}

                                        <Button
                                            type="button"
                                            variant="outline"
                                            onClick={handleBackToPhone}
                                            className="w-full"
                                            disabled={isLoading || isVerifyingSms || isSubmitting}
                                        >
                                            –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                                        </Button>

                                        <p className="text-xs text-muted-foreground text-center">
                                            –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
                                        </p>
                                    </div>
                                </div>
                            </Form>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};
